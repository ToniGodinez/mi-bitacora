// üß™ Script de prueba para verificar la funcionalidad del calendario
// Ejecutar: node test-calendar-endpoints.js

import fetch from 'node-fetch';

const API_URL = 'http://localhost:3000';

async function testCalendarEndpoints() {
  console.log('üß™ Iniciando pruebas del calendario...\n');

  try {
    // Test 1: Obtener todas las pel√≠culas
    console.log('üìã Test 1: Obtener pel√≠culas...');
    const moviesResponse = await fetch(`${API_URL}/api/movies?page=1&limit=5`);
    if (moviesResponse.ok) {
      const movies = await moviesResponse.json();
      const moviesList = Array.isArray(movies) ? movies : movies.rows || [];
      console.log(`‚úÖ Pel√≠culas obtenidas: ${moviesList.length}`);
      
      if (moviesList.length > 0) {
        const testMovie = moviesList[0];
        console.log(`üé¨ Pel√≠cula de prueba: "${testMovie.title}" (ID: ${testMovie.id})`);
        
        // Test 2: Programar pel√≠cula
        console.log('\nüìÖ Test 2: Programar pel√≠cula...');
        const testDate = '2025-09-15'; // Fecha de prueba
        const scheduleResponse = await fetch(`${API_URL}/api/movies/${testMovie.id}/schedule`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ scheduled_date: testDate })
        });
        
        if (scheduleResponse.ok) {
          console.log(`‚úÖ Pel√≠cula programada para ${testDate}`);
          
          // Test 3: Verificar pel√≠culas programadas
          console.log('\nüìÜ Test 3: Verificar pel√≠culas programadas...');
          const scheduledResponse = await fetch(`${API_URL}/api/movies/scheduled`);
          if (scheduledResponse.ok) {
            const scheduled = await scheduledResponse.json();
            console.log(`‚úÖ Fechas programadas encontradas: ${scheduled.length}`);
            
            // Test 4: Obtener pel√≠culas de fecha espec√≠fica
            console.log('\nüéØ Test 4: Obtener pel√≠culas de fecha espec√≠fica...');
            const dateResponse = await fetch(`${API_URL}/api/movies/scheduled/${testDate}`);
            if (dateResponse.ok) {
              const dateMovies = await dateResponse.json();
              console.log(`‚úÖ Pel√≠culas en ${testDate}: ${dateMovies.length}`);
              
              // Test 5: Limpiar (quitar fecha)
              console.log('\nüßπ Test 5: Limpiar fecha programada...');
              const cleanResponse = await fetch(`${API_URL}/api/movies/${testMovie.id}/schedule`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ scheduled_date: null })
              });
              
              if (cleanResponse.ok) {
                console.log('‚úÖ Fecha programada eliminada');
              } else {
                console.log('‚ùå Error al limpiar fecha');
              }
            } else {
              console.log('‚ùå Error al obtener pel√≠culas por fecha');
            }
          } else {
            console.log('‚ùå Error al obtener programadas');
          }
        } else {
          console.log('‚ùå Error al programar pel√≠cula');
        }
      } else {
        console.log('‚ö†Ô∏è No hay pel√≠culas para probar');
      }
    } else {
      console.log('‚ùå Error al obtener pel√≠culas');
    }

    console.log('\nüéâ Pruebas completadas');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.message);
  }
}

// Ejecutar pruebas
testCalendarEndpoints();
